<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mysite.restaurant.hj.mapper.UserMapper">

	<resultMap id="userMap" type="com.mysite.restaurant.hj.dto.UserDTO">
        <id property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="profileImageUrl" column="profile_image_url"/>
        <result property="notificationAgreed" column="notification_agreed"/>
        <result property="userType" column="user_type"/>
        <result property="createdAt" column="created_at"/>
		<result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="status" column="status"/>
        <collection property="authorities" ofType="com.mysite.restaurant.hj.dto.UserAuthDTO">
            <id property="authNo" column="auth_no"/>
            <result property="userId" column="user_id"/>
            <result property="auth" column="auth"/>
            <result property="isDeleted" column="is_deleted"/>
        </collection>
<!--        <collection property="restaurants" ofType="com.mysite.restaurant.jh.RestaurantDTO" resultMap="restaurantResultMap"></collection>-->
    </resultMap>
    
    <resultMap id="restaurantResultMap" type="com.mysite.restaurant.jh.RestaurantDTO">
        <id property="restaurantId" column="restaurant_id"/>
        <result property="name" column="name"/>
        <result property="restaurantPhone" column="phone"/>
        <result property="foodType" column="food_type"/>
        <result property="parkingAvailable" column="parking_available"/>
        <result property="totalSeats" column="total_seats"/>
        <result property="description" column="description"/>
        <result property="averageRating" column="average_rating"/>
        <result property="reservationAvailable" column="reservation_available"/>
        <result property="postalCode" column="postal_code"/>
        <result property="jibunAddr" column="jibun_addr"/>
        <result property="roadAddr" column="road_addr"/>
        <result property="city" column="city"/>
        <result property="district" column="district"/>
        <result property="neighborhood" column="neighborhood"/>
        <result property="detailAddr" column="detail_addr"/>
        <result property="userId" column="user_id"/>
    </resultMap>

	<!-- 회원가입 -->
	<insert id="save" parameterType="com.mysite.restaurant.hj.dto.UserDTO" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
		INSERT INTO users (user_name, PASSWORD, NAME, email, phone, notification_agreed)
		VALUES (#{userName}, #{password}, #{name}, #{email}, #{phone}, #{notificationAgreed});
	</insert>
	
	<insert id="createAuth" parameterType="com.mysite.restaurant.hj.dto.UserAuthDTO">
		INSERT INTO user_auth (user_id, auth)
		VALUES (#{userId}, #{auth})
	</insert>
	
	<select id="findByEmail" resultMap="userMap">
	    SELECT * FROM users WHERE email = #{email}
	</select>
	
	<!-- 아이디 중복 확인 -->
    <select id="existsByUserName" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM users
            WHERE user_name = #{userName}
        )
    </select>
    
    <select id="findByUserName" resultMap="userMap">
	    SELECT * FROM users WHERE user_name = #{userName}
	</select>
	
	<!-- 로그인 -->
	<select id="selectUserByUsername" resultMap="userMap">
		SELECT u.*, ua.auth_no, ua.auth
		FROM users u
		LEFT JOIN user_auth ua ON u.user_id = ua.user_id
		AND ua.is_deleted = FALSE
		WHERE u.user_name = #{userName}
		AND u.is_deleted = FALSE
		AND u.status = 'ACTIVE'
	</select>
	
	<select id="selectUserByUserId" resultMap="userMap">
		SELECT user_name, PASSWORD
		FROM users
		WHERE user_name = #{userName};
	</select>
	
	<update id="updateLastLogin">
		UPDATE users
		SET last_login_at = NOW()
		WHERE user_name = #{userName};
	</update>
	
	<!-- 사용자 정보 조회 -->
	<select id="selectUserProfile" resultType="com.mysite.restaurant.hj.dto.UserDTO">
		SELECT user_id, user_name, name, email, phone
		FROM users
		WHERE user_id = #{userId};
	</select>
	
	<!-- 사용자 정보 수정 -->
	<update id="updateUserProfile">
		UPDATE users
		SET NAME = #{name}, phone = #{phone}, notification_agreed = #{notificationAgreed}
		WHERE user_name = #{userName};
	</update>
	
	<!-- 회원 탈퇴 -->	
	<!-- 참조 데이터 삭제 -->
	<delete id="deleteUserReference">
		DELETE FROM review_replies
		WHERE user_name = (SELECT user_id FROM users WHERE user_name = #{userName});
	</delete>
	<!-- 사용자 데이터 삭제 -->
	<delete id="deleteUser">
		DELETE FROM users
		WHERE user_name = #{userName};
	</delete>
	
	<!-- 회원 명단 출력 -->
	<select id="selectAllMembers" resultMap="userMap">
		SELECT u.*, r.restaurant_id, r.name AS restaurant_name, ua.auth_no, ua.auth
		FROM users u
		LEFT JOIN user_auth ua ON u.user_id = ua.user_id
		LEFT JOIN restaurants r ON u.user_id = r.user_id
		WHERE u.is_deleted = FALSE
		ORDER BY u.user_id
	</select>
	
	<select id="getRestaurantNameByUserId" resultType="java.lang.String">
	    SELECT r.name
	    FROM users u
	    LEFT JOIN restaurants r ON u.user_id = r.user_id
	    WHERE u.user_id = #{userId}
	</select>
	
	<!-- 회원 검색 -->
	<select id="searchMembersByKeyword" resultMap="userMap">
	    SELECT u.*, r.restaurant_id, r.name, ua.auth_no, ua.auth
		FROM users u
		LEFT JOIN user_auth ua ON u.user_id = ua.user_id
		LEFT JOIN restaurants r ON u.user_id = r.user_id
		WHERE u.is_deleted = FALSE
		AND (u.name LIKE CONCAT('%', #{keyword}, '%') OR u.email LIKE CONCAT('%', #{keyword}, '%'))
		ORDER BY u.user_id
	</select>
	
	<!-- 회원 조회 -->
	<select id="selectUserById" resultMap="userMap">
	    SELECT u.*, ua.auth_no, ua.auth
	    FROM users u
	    LEFT JOIN user_auth ua ON u.user_id = ua.user_id
	    WHERE u.user_id = #{userId}
	</select>
	
	<!-- 권한 관리 -->
	<update id="updateUserAuth">
	    UPDATE user_auth
	    SET auth = #{auth}
	    WHERE user_id = #{userId}
	</update>
	
	<!-- 회원 삭제 -->
	<delete id="deleteUserById">
	    DELETE FROM users
	    WHERE user_id = #{userId}
	</delete>
</mapper>