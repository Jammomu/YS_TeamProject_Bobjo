<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mysite.restaurant.jh.RestaurantMapper">

 <resultMap id="restaurantMap" type="com.mysite.restaurant.jh.RestaurantDTO">
    <result property="restaurantId" column="restaurant_id"/>
    <result property="name" column="name"/>
    <result property="description" column="description"/>
    <result property="address" column="address"/>
    <result property="phone" column="phone"/>
    <result property="foodType" column="food_type"/>
    <result property="parkingAvailable" column="parking_available"/>
    <result property="reservationAvailable" column="reservation_available"/>
    <result property="totalSeats" column="total_seats"/>
    <result property="averageRating" column="average_rating"/>
    <result property="city" column="city"/>
    <result property="district" column="district"/>
    <result property="neighborhood" column="neighborhood"/>
    <result property="detailAddr" column="detail_addr"/>
</resultMap>
    
    <select id="searchRestaurants" resultType="com.mysite.restaurant.jh.RestaurantDTO">
  SELECT * FROM restaurants
  <where>
    <!-- query가 있을 때, 모든 조건을 포함하여 검색 -->
    <if test="query != null">
      AND (
        name LIKE CONCAT('%', #{query}, '%')
        OR city LIKE CONCAT('%', #{query}, '%')
        OR district LIKE CONCAT('%', #{query}, '%')
        OR food_type LIKE CONCAT('%', #{query}, '%')
        OR neighborhood LIKE CONCAT('%', #{query}, '%')
      )
    </if>

    <!-- 부분 조건 필터링 -->
    <if test="restaurant.name != null">
      AND name LIKE CONCAT('%', #{restaurant.name}, '%')
    </if>
    <if test="restaurant.city != null">
      AND city LIKE CONCAT('%', #{restaurant.city}, '%')
    </if>
    <if test="restaurant.district != null">
      AND district LIKE CONCAT('%', #{restaurant.district}, '%')
    </if>
    <if test="restaurant.neighborhood != null">
      AND neighborhood LIKE CONCAT('%', #{restaurant.neighborhood}, '%')
    </if>
    <if test="restaurant.foodType != null">
      AND food_type LIKE CONCAT('%', #{restaurant.foodType}, '%')
    </if>
    <if test="restaurant.parkingAvailable != null">
      AND parking_available = #{restaurant.parkingAvailable}
    </if>
    <if test="restaurant.reservationAvailable != null">
      AND reservation_available = #{restaurant.reservationAvailable}
    </if>
  </where>
  ORDER BY restaurant_id DESC
  LIMIT #{size} OFFSET #{offset}
</select>

<!-- countSearch 쿼리 수정 -->
<select id="countSearch" resultType="java.lang.Integer">
  SELECT COUNT(*) FROM restaurants
  <where>
    <!-- query가 있을 때, 모든 조건을 포함하여 검색 -->
    <if test="query != null">
      AND (
        name LIKE CONCAT('%', #{query}, '%')
        OR city LIKE CONCAT('%', #{query}, '%')
        OR district LIKE CONCAT('%', #{query}, '%')
        OR food_type LIKE CONCAT('%', #{query}, '%')
        OR neighborhood LIKE CONCAT('%', #{query}, '%')
      )
    </if>

    <!-- 부분 조건 필터링 -->
    <if test="restaurant.name != null">
      AND name LIKE CONCAT('%', #{restaurant.name}, '%')
    </if>
    <if test="restaurant.city != null">
      AND city LIKE CONCAT('%', #{restaurant.city}, '%')
    </if>
    <if test="restaurant.district != null">
      AND district LIKE CONCAT('%', #{restaurant.district}, '%')
    </if>
    <if test="restaurant.neighborhood != null">
      AND neighborhood LIKE CONCAT('%', #{restaurant.neighborhood}, '%')
    </if>
    <if test="restaurant.foodType != null">
      AND food_type LIKE CONCAT('%', #{restaurant.foodType}, '%')
    </if>
    <if test="restaurant.parkingAvailable != null">
      AND parking_available = #{restaurant.parkingAvailable}
    </if>
    <if test="restaurant.reservationAvailable != null">
      AND reservation_available = #{restaurant.reservationAvailable}
    </if>
  </where>
  ORDER BY restaurant_id DESC
</select>

	
	<select id="getRestaurants" resultType="com.mysite.restaurant.jh.RestaurantDTO">
    SELECT * FROM restaurants
    ORDER BY restaurant_id DESC
    LIMIT #{size} OFFSET #{offset}
	</select>
	
		<select id="getRestaurantsAll" resultType="com.mysite.restaurant.jh.RestaurantDTO">
    SELECT * FROM restaurants
    ORDER BY restaurant_id DESC
	</select>
	
	<select id="countTotal" resultType="int">
		SELECT count(*) FROM restaurants
	</select>
	
	 <select id="getRestaurantById" resultType="com.mysite.restaurant.jh.RestaurantDTO">
        SELECT * FROM restaurants
        WHERE restaurant_id = #{restaurantId}
    </select>
    
    <insert id="insertRestaurant" useGeneratedKeys="true" keyProperty="restaurantId">
    INSERT INTO restaurants (
        name, description, postal_code, road_addr, jibun_addr, detail_addr, city, district, neighborhood, phone, food_type, parking_available, total_seats
    ) VALUES (
        #{name}, #{description}, #{postalCode}, #{roadAddr}, #{jibunAddr}, #{detailAddr}, #{city}, #{district}, #{neighborhood}, #{phone}, #{foodType}, #{parkingAvailable}, #{totalSeats}
    )
	</insert>
    
    <select id="getMenusByRestaurantId" resultType="com.mysite.restaurant.jh.MenuDTO">
    SELECT * FROM menus
    WHERE restaurant_id = #{restaurantId}
</select>

	<update id="updateAddress">
	UPDATE restaurants
SET 
    neighborhood = 
        CASE
            WHEN CHAR_LENGTH(district) - CHAR_LENGTH(REPLACE(district, ' ', '')) >= 1 THEN 
                SUBSTRING_INDEX(district, ' ', -1)
            ELSE
                NULL
        END

	</update>
	
	<update id="updateRestaurant">
	    UPDATE restaurants
	    SET 
	        name = #{name},
	        description = #{description},
	        postal_code = #{postalCode},
	        road_addr = #{roadAddr},
	        jibun_addr = #{jibunAddr},
	        detail_addr = #{detailAddr},
	       	city = #{city},
	       	district = #{district},
	       	neighborhood = #{neighborhood},
	        phone = #{phone},
	        food_type = #{foodType},
	        parking_available = #{parkingAvailable},
	        total_seats = #{totalSeats}
	    WHERE restaurant_id = #{restaurantId}
	</update>
	
	<delete id="deleteRestaurant">
	    DELETE FROM restaurants
	    WHERE restaurant_id = #{restaurantId}
	</delete>
	
	<insert id="insertMenu">
	    INSERT INTO menus (
	        restaurant_id, name, price
	    ) VALUES (
	        #{restaurantId}, #{name}, #{price}
	    )
	</insert>

	<delete id="deleteMenu">
	    DELETE FROM menus
	    WHERE menu_id = #{menuId} AND restaurant_id = #{restaurantId}
	</delete>
	
	<insert id="insertImage">
	    INSERT INTO restaurant_images (
	        restaurant_id, image_url, image_order, uid
	    ) VALUES (
	        #{restaurantId}, #{imageUrl}, TRUE, #{uid}
	    )
	</insert> 
	
	 <select id="getRestaurantImageById" resultType="com.mysite.restaurant.jh.ImageDTO">
    SELECT * FROM restaurant_images
    WHERE restaurant_id = #{restaurantId}
	</select>
	
		<delete id="deleteImage">
	    DELETE FROM restaurant_images
	    WHERE image_id = #{imageId} AND restaurant_id = #{restaurantId}
	</delete>
	
	<!-- 1. 모든 이미지의 image_order를 false로 설정 -->
    <update id="updateImageOrderToFalse">
        <!-- 기존 image_order가 TRUE인 값들을 모두 FALSE로 업데이트 -->
    UPDATE restaurant_images
    SET image_order = FALSE
    WHERE restaurant_id = #{restaurantId} AND image_order = TRUE;
    </update>

    <!-- 2. 특정 이미지의 image_order를 true로 설정 (대표 이미지로 설정) -->
    <update id="updateImage">
        UPDATE restaurant_images
        SET image_order = #{imageOrder}
        WHERE image_id = #{imageId} AND restaurant_id = #{restaurantId}
    </update>
	
	<select id="getScheduleById" resultType="com.mysite.restaurant.jh.Schedule">
    SELECT * FROM schedule
    WHERE restaurant_id = #{restaurantId}
	</select>
	
	<select id="getMaxImageOrder" resultType="java.lang.Boolean">
    SELECT image_order = 1 FROM restaurant_images
    WHERE restaurant_id = #{restaurantId} AND image_order = true
    LIMIT 1
</select>
</mapper>
